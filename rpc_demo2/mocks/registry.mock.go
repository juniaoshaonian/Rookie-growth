// Code generated by MockGen. DO NOT EDIT.
// Source: type.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	rpc_demo2 "rpc_demo2/register"

	gomock "github.com/golang/mock/gomock"
)

// MockRegistry is a mock of Registry interface.
type MockRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryMockRecorder
}

// MockRegistryMockRecorder is the mock recorder for MockRegistry.
type MockRegistryMockRecorder struct {
	mock *MockRegistry
}

// NewMockRegistry creates a new mock instance.
func NewMockRegistry(ctrl *gomock.Controller) *MockRegistry {
	mock := &MockRegistry{ctrl: ctrl}
	mock.recorder = &MockRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistry) EXPECT() *MockRegistryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRegistry) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRegistryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRegistry)(nil).Close))
}

// ListService mocks base method.
func (m *MockRegistry) ListService(ctx context.Context, serviceName string) ([]rpc_demo2.ServiceInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListService", ctx, serviceName)
	ret0, _ := ret[0].([]rpc_demo2.ServiceInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListService indicates an expected call of ListService.
func (mr *MockRegistryMockRecorder) ListService(ctx, serviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListService", reflect.TypeOf((*MockRegistry)(nil).ListService), ctx, serviceName)
}

// Register mocks base method.
func (m *MockRegistry) Register(ctx context.Context, ins rpc_demo2.ServiceInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, ins)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockRegistryMockRecorder) Register(ctx, ins interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegistry)(nil).Register), ctx, ins)
}

// SubScribe mocks base method.
func (m *MockRegistry) SubScribe(serviceName string) (<-chan rpc_demo2.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubScribe", serviceName)
	ret0, _ := ret[0].(<-chan rpc_demo2.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubScribe indicates an expected call of SubScribe.
func (mr *MockRegistryMockRecorder) SubScribe(serviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubScribe", reflect.TypeOf((*MockRegistry)(nil).SubScribe), serviceName)
}

// UnRegiter mocks base method.
func (m *MockRegistry) UnRegiter(ctx context.Context, ins rpc_demo2.ServiceInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnRegiter", ctx, ins)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnRegiter indicates an expected call of UnRegiter.
func (mr *MockRegistryMockRecorder) UnRegiter(ctx, ins interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnRegiter", reflect.TypeOf((*MockRegistry)(nil).UnRegiter), ctx, ins)
}
